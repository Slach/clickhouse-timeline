name: Build and Push

on:
  push:
    branches: [ '**' ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build
      run: |
        mkdir -p build
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/clickhouse-timeline-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} cmd/clickhouse-timeline/main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/clickhouse-timeline-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v5

    - name: Download amd64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-linux-amd64
        path: build

    - name: Download arm64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-linux-arm64
        path: build

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Set Docker tags
      id: docker-tags
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}
          echo "tags=ghcr.io/slach/clickhouse-timeline:${VERSION},ghcr.io/slach/clickhouse-timeline:latest,clickhousepro/clickhouse-timeline:${VERSION},clickhousepro/clickhouse-timeline:latest" >> $GITHUB_OUTPUT
        else
          BRANCH="${{ github.ref_name }}"
          echo "tags=ghcr.io/slach/clickhouse-timeline:${BRANCH},clickhousepro/clickhouse-timeline:${BRANCH}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.docker-tags.outputs.tags }}
        platforms: linux/amd64,linux/arm64

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v5
    - uses: actions/download-artifact@v4
      with:
        name: binaries-linux-amd64
        path: build
    - uses: actions/download-artifact@v4
      with:
        name: binaries-linux-arm64
        path: build
    - uses: actions/download-artifact@v4
      with:
        name: binaries-windows-amd64
        path: build
    - uses: actions/download-artifact@v4
      with:
        name: binaries-windows-arm64
        path: build
    - uses: actions/download-artifact@v4
      with:
        name: binaries-darwin-amd64
        path: build
    - uses: actions/download-artifact@v4
      with:
        name: binaries-darwin-arm64
        path: build

    - name: Prepare release notes
      id: release_notes
      run: |
        awk '/^# / {s++} s == 1 {print}' CHANGELOG.md > /tmp/release_notes.md
        echo "path=/tmp/release_notes.md" >> $GITHUB_OUTPUT

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        body_path: ${{ steps.release_notes.outputs.path }}
        fail_on_unmatched_files: true
        files: |
          build/clickhouse-timeline-linux-amd64
          build/clickhouse-timeline-linux-arm64
          build/clickhouse-timeline-windows-amd64.exe
          build/clickhouse-timeline-windows-arm64.exe
          build/clickhouse-timeline-darwin-amd64
          build/clickhouse-timeline-darwin-arm64
